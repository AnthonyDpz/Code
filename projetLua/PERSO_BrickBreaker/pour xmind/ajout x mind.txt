********************rebond :

if ball.x > largeur then
    ball.vX = 0 - ball.vX
    ball.x = largeur
  end
  if ball.x < 0 then
      ball.vX = 0 - ball.vX
      ball.x = 0
  end
  if ball.y < 0 then
    ball.vY = 0 - ball.vY
    ball.y = 0
  end

*************gestion de la collision avec le pad :

-- test de collision avec le pad
  local posCollisionPadY = pad.y - (pad.hauteur/2) - ball.rayon
  if ball.y > posCollisionPadY then
    local dist = math.abs(pad.x - ball.x)
    if dist < pad.largeur/2 then
      ball.vY = 0 - ball.vY
      ball.y = posCollisionPadY
    end
  end

**********dessin des briques :

--preparation
  niveau = {}
  for l=1,6 do
    niveau[l] = {}
    for c=1,15 do
      niveau[l][c] = 1
    end
  end
-- dessin des briques
  local bx,by = 0,0
  for l=1,6 do
    bx = 0
    for c=1,15 do
      if niveau[l][c] == 1 then
        --dessine une brique
        love.graphics.rectangle("fill",bx+1,by+1,brique.largeur-2,brique.hauteur-2)
      end
      bx = bx + brique.largeur
    end
    by = by + brique.hauteur
  end

***********collision avec les briques :
-- collision avec une brique ?
  local c = math.floor(ball.x/brique.largeur)+1
  local l = math.floor(ball.y/brique.hauteur)+1
  
  if l >= 1 and l <= #niveau and c >= 1 and c <= 15 then
    if niveau[l][c] == 1 then
      ball.vY = 0 - ball.vY
      niveau[l][c] = 0
    end
  end